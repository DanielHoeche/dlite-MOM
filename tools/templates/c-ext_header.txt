/* This file is generated with dlite-codegen -- do not edit!
 *
 * Template: c-ext_header.txt
 * Metadata: {_uri}
 *
 * This file defines two macros {name}_HEAD and {name}_TAIL with which
 * you can declare an extended struct for metadata {name} like
 *
 *     typedef struct _{name} {{
 *       {name}_HEAD
 *       <my fields>...
 *       {name}_TAIL
 *     }} {name};
 *
 * where <my fields> are any additional fields for internal data you
 * for {name}.  If you do this, remember to update the metadata using
 * the DLITE_UPDATE_EXTENEDE_META() macro before loading/creating any
 * instances.
 *
 * This file can be included and used in your project without any
 * dependencies (except for the header files boolean.h, integers.h and
 * floats.h that are provided with dlite).
 */

/**
  @file
  @brief {descr}
*/
#ifndef _{name%U}_H
#define _{name%U}_H

#include "utils/integers.h"
#include "utils/boolean.h"
#include "utils/floats.h"

#define {name%U}_NAME      "{name}"
#define {name%U}_VERSION   "{version}"
#define {name%U}_NAMESPACE "{namespace}"
#define {name%U}_URI       "{_uri}"
#define {name%U}_UUID      "{_uuid}"
#define {name%U}_META_URI  "{meta.uri}"
#define {name%U}_META_UUID "{meta.uuid}"
#define {name%U}_IRI       "{_iri}"


/* Define generic types in case we don't have dlite */
#if defined(HAVE_DLITE)
# include "dlite.h"
#elif ! defined(HAVE_DLITE_GENERIC_TYPES)
# define HAVE_DLITE_GENERIC_TYPES
# define DLiteInstance  void
# define DLiteMeta      void
# define DLiteDimension void
# define DLiteProperty  void
typedef struct {{char *s, *p, *o, *id;}} DLiteRelation;
#endif


#define {name}_HEAD  {@40}\\
  /* -- header */                       \\
  char _uuid[36+1];                     \\
  const char *_uri;                     \\
  size_t _refcount;                     \\
  const DLiteMeta *meta;                \\
  const char *_iri;                     \\
{@if:{ismeta}=1}
                                        \\
  size_t _ndimensions;                  \\
  size_t _nproperties;                  \\
  size_t _nrelations;                   \\
                                        \\
  DLiteDimension *_dimensions;          \\
  DLiteProperty *_properties;           \\
  DLiteRelation *_relations;            \\
                                        \\
  size_t _headersize;                   \\
  int (*_init)(DLiteInstance *inst);    \\
  int (*_deinit)(DLiteInstance *inst);  \\
                                        \\
  size_t _npropdims;                    \\
  size_t *_propdiminds;                 \\
                                        \\
  size_t _dimoffset;                    \\
  size_t *_propoffsets;                 \\
  size_t _reloffset;                    \\
  size_t _propdimsoffset;               \\
  size_t _propdimindsoffset;            \\
{@endif} \


#define {name}_VALUES              {@78}\\
  /* -- dimension values */        {@78}\\
{list_dimensions:  size_t {dim.name}; {@30}/* {dim.descr} */{@78}\\\n} {@78}\\
  /* -- property values */         {@78}\\
{list_properties:  {prop.cdecl}; {@30}/* {prop.descr} {@if:{prop.ndims}!0}; [{prop.dims:{dim.name}{,}\.}]{@endif} */{@78}\\\n} \
{@if:{_nrelations}!0}              {@78}\\
  /* -- relation values */         {@78}\\
  DLiteRelation __relations[{_nrelations}];
{@endif} \


#define {name}_ENDTAIL \\
  /* -- __propdims: property dimension values */ \\
  size_t __propdims[{_npropdims}]; \
{@if:{ismeta}=1} \\
  /* -- __propdiminds: index of first dimension for each property */ \\
  size_t __propdiminds[{_nproperties}]; \\
  /* -- __propoffsets */ \\
  size_t __propoffsets[{_nproperties}];
{@endif} \


#define {name}_TAIL \\
  {name}_VALUES {name}_ENDTAIL


#ifndef CUSTOM_{name%U}
typedef struct _{name} {{
  {name}_HEAD

  /* -- dimension values */
{list_dimensions:  size_t {dim.name}; {@30}/* {dim.descr} */\n}
  /* -- property values */
{list_properties:  {prop.cdecl}; {@30}/* {prop.descr} {@if:{prop.ndims}!0}; [{prop.dims:{dim.name}{,}\.}]{@endif} */\n} \
{@if:{_nrelations}!0}
  /* -- relation values */
  DLiteRelation __relations[{_nrelations}];
{@endif} \

 {name}_ENDTAIL
}} {name};
#endif

#endif /* _{name%U}_H */
