/* This file is generated with dlite-codegen -- do not edit!
 *
 * Template: c-header.txt
 * Metadata: {_uri}
 *
 * This file declares a struct for metadata {name} that can be included
 * and used in your project without any dependencies (except for the
 * header files boolean.h, integers.h and floats.h that are provided with
 * dlite).
 */

/**
  @file
  @brief {descr}
*/
#ifndef _{name%U}_H
#define _{name%U}_H

#include "utils/integers.h"
#include "utils/boolean.h"
#include "utils/floats.h"

#define {name%U}_NAME      "{name}"
#define {name%U}_VERSION   "{version}"
#define {name%U}_NAMESPACE "{namespace}"
#define {name%U}_URI       "{_uri}"
#define {name%U}_UUID      "{_uuid}"
#define {name%U}_META_URI  "{meta.uri}"
#define {name%U}_META_UUID "{meta.uuid}"


typedef struct _{name} {{
  /* -- header */
  char _uuid[36+1];   /*!< UUID for this data instance. */
  const char *_uri;   /*!< Unique name or uri of the data instance.
                           Can be NULL. */

  size_t _refcount;   /*!< Number of references to this instance. */

  const void *_meta;  /*!< Pointer to the metadata describing this instance. */
{@if:{ismetameta}==1}\

  size_t _ndimensions;           /*!< Number of dimensions in instance. */
  size_t _nproperties;           /*!< Number of properties in instance. */
  size_t _nrelations;            /*!< Number of relations in instance. */

  DLiteDimension *_dimensions;   /*!< Array of dimensions. */
  DLiteProperty *_properties;    /*!< Array of properties. */
  DLiteRelation *_relations;     /*!< Array of relations. */

  size_t _headersize;            /*!< Size of instance header. */
  DLiteInit _init;               /*!< Function initialising instance. */
  DLiteDeInit _deinit;           /*!< Function deinitialising instance. */

  size_t _dimoffset;             /*!< Offset of first dimension value. */
  size_t *_propoffsets;          /*!< Array of offsets of property values. */
  size_t _reloffset;             /*!< Offset of first relation value. */
  size_t _pooffset;              /*!< Offset to array of property offsets. */
{@endif}\
  /* -- dimension values */
{list_dimensions:  size_t {dim.name};  {@33}/*!< {dim.descr} */\n}
  /* -- property values */
{list_properties:  {prop.cdecl};  {@33}/*!< {prop.descr}\
{@if:{prop.ndims}!=0} [{prop.dims:{dim.name}{,}\.}]{@endif} */\n}
{@if:{ismetameta}=1}\
  size_t offsets[{_nproperties}];
{@endif}\
}} {name};


#endif /* _{name%U}_H */
