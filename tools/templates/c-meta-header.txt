/* -*- C -*-  (not really, but good for syntax highlighting) */

/* This file is generated with dlite-codegen {dlite.version} -- do not edit!
 *
 * Template: c-meta-header.txt
 * Source:   {_uri}
 *
 * Declares the struct `{name}Schema` for metadata entity
 * {_uri}.
 *
 * It can be included and used in your project without any
 * dependencies (except for the header files boolean.h, integers.h and
 * floats.h that are provided with dlite).
 *
 * However it is beneficial to use it together with the dlite library,
 * e.g. for letting dlite handle I/O.  In that case you should either
 * define the macro HAVE_DLITE or including "dlite.h" before including
 * this header.  Instances of `{name}` are valid dlite instances and
 * can safely be casted to `DLiteInstance`.
 *
 * It is also possible to extend the header of the {name}Schema
 * struct with custom fields.  It that case you should define the
 * macro {name}Schema_HEAD before including this header, like
 *
 *     #define {name}Schema_HEAD {@40}\\
 *       DLiteInstance_HEAD      {@40}\\
 *       <my fields>...
 *
 *     #include "{name%c}.h"
 *
 * where <my fields> are any additional fields you want to add to
 * {name}.  If you do this, remember to update the metadata using
 * the DLITE_UPDATE_EXTENEDE_META() macro before loading/creating any
 * instances.
 */

/**
  @file
  @brief {descr}
*/
{@if: {isdata} }\
{@error:The template c-meta-header requires metadata as input}
{@endif}\
{@if: {struct_name?}=0 }\
{struct_name={name}Schema}\
{@endif}\
\
#ifndef _{struct_name%N}_H
#define _{struct_name%N}_H

#include "utils/integers.h"
#include "utils/boolean.h"
#include "utils/floats.h"

#ifndef {name%U}_NAME
#define {name%U}_NAME      "{name}"
#define {name%U}_VERSION   "{version}"
#define {name%U}_NAMESPACE "{namespace}"
#define {name%U}_URI       "{_uri}"
#define {name%U}_UUID      "{_uuid}"
#define {name%U}_IRI       "{_iri}"
#define {name%U}_META_URI  "{meta.uri}"
#define {name%U}_META_UUID "{meta.uuid}"
#define {name%U}_META_IRI  "{meta.iri}"
#endif


/** Minimal set of typedefs in case we don't have dlite */
#if defined(HAVE_DLITE)
#include "dlite.h"
#elif ! defined(DLITE_MINIMAL_DEFS)
#define DLITE_MINIMAL_DEFS
typedef enum {{dliteBlob, dliteBool, dliteInt, dliteUInt, dliteFloat,
              dliteFixString, dliteStringPtr,
                   dliteDimension, dliteProperty, dliteRelation}} DLiteType;
typedef struct {{ char *name, description; }} DLiteDimension;
typedef struct {{
  char *name;
  DLiteType type;
  size_t size;
  int ndims;
  char **dims, *unit, *iri, *description;
}} DLiteProperty;
typedef void DLiteInstance;
#define DLiteInstance_HEAD
#define DLiteMeta_HEAD
#endif


/** Initial fields of the {struct_name} structure. */
#ifndef {struct_name}_HEAD
#define {struct_name}_HEAD  DLiteMeta_HEAD
#endif


/** Final fields of the {name}Schema structure. */
#ifdef HAVE_DLITE
#define {struct_name}_TAIL {@78}\\
  size_t __propdims[{meta._npropdims}];{@30}/*!< property dimension values */{@78}\\
  size_t __propdiminds[{_nproperties}];{@30}/*!< index of first dim for each property */{@78}\\
  size_t __propoffsets[{_nproperties}];{@30}/*!< offset of each property */
#else
#define {struct_name}_TAIL
#endif


typedef struct _{struct_name} {{
  {struct_name}_HEAD  {@30}/*!< Common head for all instances */

  /* -- dimension values */
{list_meta_dimensions:  size_t {dim.name};{@30}/*!< {dim.descr} */\n}
  /* -- property values */
{list_meta_properties:  {prop.cdecl};{@30}/*!< {prop.descr} {@if:{prop.ndims}!0}; [{prop.dims:{dim.name}{,}\.}]{@endif} */\n} \
{@if:{_nrelations}!0}
  /* -- relation values */
  DLiteRelation __relations[{_nrelations}];
{@endif} \

  {struct_name}_TAIL
}} {struct_name};


#endif /* _{struct_name%N}_H */
