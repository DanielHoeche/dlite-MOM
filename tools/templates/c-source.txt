/* This file is generated with dlite-codegen -- do not edit!
 *
 * Template: c-source.txt
 * Metadata: {_uri}
 *
 */
#include <stddef.h>

#include "dlite.h"
#include "{header}"
#include "{meta.header}"


{@if:{ismeta}==1}
static DLiteDimension {name}_dimensions[] = {{
{list_dimensions:  {{"{dim.name}", "{dim.descr}"}}{,}\n}\
}};
{list_properties:\
{@if:{prop.ndims}!=0}\
static int {basename}_prop_{prop.name}_dims[] = {{\
{prop.dims:{dim.n}{, }\.}\
}};
{@endif}\.}\
static DLiteProperty {name}_properties[] = {{
{list_properties:  {{
    "{prop.name}", /* name */
    {prop.dtype}, /* type */
    {prop.size}, /* size */
    {prop.ndims}, /* ndims */
{@if:{prop.ndims}==0}\
    NULL, /* dims */
{@else}\
    {basename}_prop_{prop.name}_dims, /* dims */
{@endif}\
{@if:{prop.unit}\.}\
    "{prop.unit}", /* unit */
{@else}\
    NULL, /* unit */
{@endif}\
{@if:{prop.descr}\.}\
    "{prop.descr}" /* description */
{@else}\
    NULL /* description */
{@endif}\
  }}{,}
}\
}};
{@endif}


{meta.name} {basename}_schema = {{
  /* -- header */
  "{_uuid}", {@60}/* uuid */
  "{_uri}", {@60}/* uri */
  1, {@60}/* refcount */
  NULL, {@60}/* meta */
{@if:{ismeta}==1}
  {_ndimensions}, {@60}/* ndimensions */
  {_nproperties}, {@60}/* nproperties */
  {_nrelations},  {@60}/* nrelations */

  {name}_dimensions, {@60}/* dimensions */
  {name}_properties, {@60}/* properties */
  NULL,              {@60}/* relations */

  {_headersize}, {@60}/* headersize */
  {_init}, {@60}/* init */
  {_deinit}, {@60}/* deinit */

  0,    {@60}/* dimoffset */
  NULL, {@60}/* propoffsets */
  0,    {@60}/* reloffset */
  0,    {@60}/* pooffset */
{@endif}\
  /* -- length of each dimension */
{list_meta_dimensions:  {dim.value}, {@60}/* {dim.name} */\n}\
  /* -- value of each property */
{list_meta_properties:  {prop.cvalue}, {@60}/* {prop.name} */\n}\
  /* -- value of each relation */
  {list_relations:  {{"{rel.s}", "{rel.p}", "{rel.o}", "{rel.id}"}}{,}\n}\
  /* -- memory offsets for each property in instances */
  {{
{list_properties:    offsetof({name}, {prop.name}){,}\n}\
  }}
}};


const DLiteMeta *{basename}_get_schema()
{{
  DLiteMeta *schema = &{basename}_schema;
  if (!schema->meta) {{
    schema->meta = dlite_metastore_get("{meta.uri}");
  }}
  return (const DLiteMeta *)schema;
}}
