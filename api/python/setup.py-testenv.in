"""The setup script, used for testing the python-bindings
in a virtual enviroment during the cmake-build-process.
"""

import sys
import os
import shutil
import platform

from distutils.command.build_ext import build_ext
from pathlib import Path
from setuptools import setup, Distribution, Extension


current_bindir=Path("${dlite_BINARY_DIR}")


if platform.system() == "Linux":
    dlite_compiled_ext = "_dlite.so"
    dlite_ext_loc=Path("./")
    dlite_extinstall_dir=Path("./lib")

elif platform.system() == "Windows":
    dlite_compiled_ext = "_dlite.pyd"
    dlite_ext_loc=Path("./${CMAKE_CONFIGURATION_TYPES}") # ./Release
    dlite_extinstall_dir=Path("./")
    
else:
    raise NotImplementedError()

extensions=[

             ## Base extensions

             # dlite.dll, dlite.exp, dlite.lib, dlite-static.lib, gencfile.exe;                            libdlite.so
             { "src":  current_bindir / "src" / dlite_ext_loc,
               "dest": dlite_extinstall_dir},

             # dlite-pyembed.dll, dlite-pyembed.lib, dlite-pyembed.exp, dlite-pyembed-static.lib;          libdlite-pyembed.so
             { "src":  current_bindir / "src" / "pyembed" / dlite_ext_loc,
               "dest": dlite_extinstall_dir},

             # dlite-utils.dll, dlite-utils.exp, dlite-utils.lib, dlite-utils-static.lib;                  libdlite-utils.so
             { "src":  current_bindir / "src" / "utils" / dlite_ext_loc,
               "dest": dlite_extinstall_dir},

            ## Storage Plugins

             # dlite-plugin-json.dll, dlite-plugin-json.exp, dlite-plugin-json.lib                         libdlite-plugins-json.so
             { "src":  current_bindir / "storages" / "json" / dlite_ext_loc,
               "dest": dlite_extinstall_dir / Path("${DLITE_STORAGE_PLUGIN_DIRS}") },

             # dlite-plugins-python.dll, dlite-plugins-python.exp, dlite-plugins-python.lib                libdlite-plugins-python.so
             { "src":  current_bindir / "storages" / "python" / dlite_ext_loc,
               "dest": dlite_extinstall_dir / Path("${DLITE_STORAGE_PLUGIN_DIRS}") },

            ## Storage Plugins (Python) - unclear where to put them

             ## dlite-plugins-python.dll, dlite-plugins-python.exp, dlite-plugins-python.lib                libdlite-plugins-python.so
             #{ "src":  current_bindir / "storages" / "python" / dlite_ext_loc,
             #  "dest": dlite_extinstall_dir / Path("${DLITE_STORAGE_PLUGIN_DIRS}") },

           ## Mapping Plugins (None yet)
             # some-mapping-plugin.dll
             #{ "src":  current_bindir / "storages" / "python" / dlite_ext_loc,
             #  "dest": dlite_extinstall_dir / Path("${DLITE_MAPPING_PLUGIN_DIRS}") },


           ]

LIB_EXT="${SH_EXT}" # *.dll, *.so

class BinaryDistribution(Distribution):
    def has_ext_modules(self):
        return True
    def is_pure(self):
        return False

class MyBuildExt(build_ext):
    def build_extension(self, ext):
        thisdir=Path(self.get_ext_fullpath(ext.name)).parent / "dlite"

        # Add extensions
        for e in extensions:
            if os.path.isdir(e["src"]):
                for item in os.listdir(e["src"]):
                    if item.endswith(LIB_EXT):
                        (thisdir / e["dest"]).mkdir(exist_ok=True, parents=True)
                        shutil.copyfile(e["src"] / item, thisdir / e["dest"] / item)


version = "${dlite_VERSION}"

requirements = [
    "numpy",
    "PyYAML",
    "psycopg2-binary",
    "pandas",
    "tables"
    ]

setup(
    author="Peter Schiffels",
    author_email="peter.schiffels@ifam.fraunhofer.de",
    python_requires=">=3.8",
    classifiers=[
        "Development Status :: 2 - Pre-Alpha",
        "Intended Audience :: Developers",
        "Natural Language :: English",
        "Programming Language :: Python :: 3",
        "Programming Language :: Python :: 3.8",
    ],
    platforms=[ "Windows", "Linux" ],
    description="Experimental dlite python package setup for testing in a virtual environment.",
    #entry_points={
    #    "console_scripts": [
    #        "MyScript=myscript:main",
    #    ],
    #},
    
    install_requires=requirements,
    #dependency_links=dependencies,
    long_description="",
    include_package_data=True,
    keywords="dlite",
    name="dlite-python",
    
    package_dir = { "dlite": r"../../bindings/python/dlite" }, # Must be relative
    package_data={ "dlite": [ dlite_compiled_ext ] },
    packages= [ "dlite" ],
    #setup_requires=setup_requirements,
    #test_suite="tests",
    #tests_require=test_requirements,
    
    has_ext_modules=lambda: True,
    ext_modules=[
      Extension(
        "dlite-extension",
        [],
       )
    ],
    cmdclass={ "build_ext" : MyBuildExt },
    distclass=BinaryDistribution,
    
    version=version,
    zip_safe=False,
)
